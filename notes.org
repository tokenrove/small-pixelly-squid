
* Big Questions

What do we want to schedule for a "release candidate"?

* Tasks
- [X] new leads to new pane with creation wizard
  - [X] berzerk level project:
    - tile dimension (fixed at 16, disabled)
    - room dimensons (fixed at 20x13, disabled)
- [X] embed filechooser in notebook pane
      - open leads to new pane with file chooser
- [X] try an IconView for the palette widget
- [X] load slab, split into palette entries

- [X] externalize level data from Berzerk
- [X] load and display in SPS
** Level editing:
- [ ] move rooms on an infinite grid
- [ ] add/remove/duplicate rooms
- [X] switch to room editor mode (edit fn)
** room editing
- [ ] game-independent map editor mode
  - [ ] mortimer from PNG
  - [ ] blank slate
  - [ ] figure out how slab editing should work
- [X] old Animosity format
- [X] switch tilemap presentation to generate a pixbuf instead of
  using goocanvas.Image -- it's too slow for a large map


- [X] new panel calls mode.NewPanelOptions which is linked with OK
  button
- [X] use gtk.TreeModel for new panel selector
- [X] simple manual table of modes initially
- [X] open panel runs autodetect routines which run in order of
  precision (magic data vs filename)
- [X] add a simple image mode as a test

- [ ] berzerk level editor can use tilemap preview generation routine
  to make images from indv. room maps, then place those images on the canvas

- [ ] generic grid editor
  - RasterMap:
    - Tilemap
      - BerzerkRoom
    - ObjectGrid (effectively draggable tiles)
      - BerzerkLevelLayout
    - Image
- [ ] generic palette implementation based on goocanvas? or just cairo
- [ ] add simple zoom control (popup slider on Z with focus grabbed)

- [ ] modifier keys for drawing behavior:
  - shift/control as concept of remove/add, so paint
    transparency/alternate selection perhaps
  - shift should snap to straight lines for drawing
- [ ] right click for context menu
  - [ ] brainstorm places where context should go

- [X] abstract models out from panels
  - mode functions are responsible for pairing together models and
    panels
  - new_options_fn creates a model based on the given options, then
    passes it to the panel
  - ditto open_fn
  - probably going to need callbacks for map/palette changed
    - notification from tilemap editor that map has changed
      (unnecessary if all editing happens on model side)
    - notification from model that map has changed
      (when does this happen?)

- [ ] separate out tilemap presentation from tilemap editing and
  panel:
  - [ ] presentations as a tool for building panels:
    - [ ] map presentation as an easy widget to throw on, separate
      from panel
    - [ ] palette presentation separate from panel
  - [ ] edit operations occur on editor side, interface side registers
    as a listener for changes
  - [ ] on changes, presentation is updated
  - [ ] models should be able to have listeners for
    has_unsaved_changes, so that, e.g., panel labels can change and
    the context menu can be updated

- [X] interface for saving changes
- [ ] berzerk room add
  - [ ] figure out how to handle adding a room when no slab specified
- [ ] berzerk room connections edit
- [ ] berzerk spawn edits
- [ ] implement unsaved confirmation

- [X] restructure imports so we use packages correctly
- [X] implement berzerk room sub-edit via own tracked panels

- [X] write some utility functions for boring form code

- [ ] tool indicators for cursor

Generic model:
  name : str
  is_saved : bool
  Model.load(path) -> Model
  save(self) -> ?


Berzerk level format:
 - magic
 - array of rooms
   - dimensions (should be 20x13)
   - map (1D array of integers)
   - slab (filename)
   - tile properties (tile, propmask pairs)
   - actors
   - connections (array of (facing,room idx) pairs)

_MAGIC = 'Berzerk'
level = {
 'rooms': [
   {'dim': (20,13),
    'map': [],
    'slab': 'foo.png',
    'tile properties': [(0,1),(1,1)],
    'actors': [('humanoid', (50,50))]
    'connections': [(1,1)], }
 ]
}

* Wishlist
- [ ] Hints for autodetect routine on how expensive a predicate is;
  sort autodetect list by estimated predicate cost
- [ ] open routine should search panels for panel with same path
  already open, switch to that panel instead
- [ ] panels with unsaved changes should have their labels shown differently
- [ ] system for key binding for menus
- [ ] generate and cache previews for tilemaps and so on

- [ ] determine connectivity graph of tilemap based on tile
  properties, display walkability overlay, or answer
  get-here-from-there queries

- [ ] "scale-9" style brush selection... specify a center that gets
  repeated, while edges are once-only
- [ ] gravity model of painting based on walkability model

- [ ] when trying to quit the application with unsaved buffers,
      instead of buffer-by-buffer confirm, present a quit panel with a
      summary of unsaved buffers, with the ability to save them
      quickly

- [ ] think about how to make components composable so that new game
  modes can be written with minimal code burden

- [ ] song synchronization editor:
  - display/play mp3
  - allow placing events (either cues or ranges) relative to song
    position
  - would be ideal for squid licorice or demos

- [ ] study gimp's display filters implementation to implement
  limited-color emulation modes, even Atari ST palette shifting modes

- [ ] implement marching ants for selections, transparency; use idle
  loop as per animations

- sprite sheet mode:
  - Initially, modifications of sprite-preview:
    - [ ] show numbered rectangles/grid around sheet
    - [ ] highlight selected frames for preview
  - [ ] integrate sprite-preview.py as part of the sprite sheet mode
  - [ ] animation preview toggleable feature
  - [ ] possible to import, rearrange, pack sprite sheets, save back
    to image+metadata (embed sprite anim info in PNG metadata perhaps?)
